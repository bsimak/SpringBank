{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red251\green2\blue7;\red0\green0\blue0;\red74\green0\blue255;
\red29\green226\blue223;}
{\*\expandedcolortbl;;\cssrgb\c100000\c14913\c0;\csgray\c0;\cssrgb\c36732\c20485\c100000;
\cssrgb\c0\c90000\c90000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \ul \ulc2 \CocoaLigature0 ApplicationLauncher
\f1\b0\fs22 \cf3 \ulnone \
\
package org.example;\
\
import org.apache.catalina.Context;\
import org.apache.catalina.LifecycleException;\
import org.apache.catalina.Wrapper;\
import org.apache.catalina.startup.Tomcat;\
import org.example.web.MyBankServlet;\
\
public class ApplicationLauncher \{\
\
    static final int defPort = 8080;\
\
\
    public static void main(String[] args) throws LifecycleException \{\
        /** use this with java -Dport80xx -jar target/xy\
         if Port not provided as Parameter -> use default Port */\
\
        int port;\
        String sPort = (System.getProperty("port"));\
\
        if ((sPort == null) || (sPort.isEmpty())) \{\
            port = defPort;\
        \} else \{\
            port = Integer.parseInt(System.getProperty("port"));\
        \}\
        Tomcat tomcat = new Tomcat();\
\
        tomcat.setPort(port);\
        tomcat.getConnector();\
\
        Context ctx = tomcat.addContext("", null);\
        Wrapper servlet = Tomcat.addServlet(ctx, "org.com.example.org.example.web.MyBankServlet", new MyBankServlet());\
        servlet.setLoadOnStartup(1);\
        servlet.addMapping("/*");\
\
        tomcat.start();\
        System.out.println("Tomcat started.....");\
        System.out.println("Listen at Port: " + port);\
    \}\
\}\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs28 \cf2 \ul \ulc2 Application
\f1\b0\fs22 \cf3 \ulnone \
\
package org.example.context;\
  \
import com.fasterxml.jackson.databind.ObjectMapper;\
import org.example.service.TransactionService;\
\
public class Application \{\
    public static final TransactionService transactionService = new TransactionService();\
    public static final ObjectMapper objectMapper = new ObjectMapper();\
\
\}\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \ul \ulc2 ApplicationConfiguration
\f1\b0\fs22 \cf3 \ulnone \
\
package org.example.context;\
  \
import com.fasterxml.jackson.databind.ObjectMapper;\
import org.example.ApplicationLauncher;\
import org.example.service.InvoiceService;\
import org.example.service.UserService;\
import org.springframework.beans.factory.config.ConfigurableBeanFactory;\
import org.springframework.context.ConfigurableApplicationContext;\
import org.springframework.context.annotation.*;\
\
@Configuration\
@ComponentScan(basePackageClasses = ApplicationLauncher.class)\
// Reihenfolge ist wichtid (overwrite) & falls File nicht vorhanden ignore\
@PropertySource("classpath:/application.properties")\
@PropertySource(value="classpath:/application-$\{spring.profiles.active\}.properties"\
    , ignoreResourceNotFound = true)\
\
public class ApplicationConfiguration \{\
\
    @Bean\
    public ObjectMapper objectMapper()\{\
        return new ObjectMapper();\
    \}\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b\fs24 \cf2 MyBankServlet
\f1\b0\fs22 \cf4 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf3 package org.example.web;\
  \
import com.fasterxml.jackson.databind.ObjectMapper;\
import org.example.context.Application;\
import org.example.model.Transaction;\
\
import javax.servlet.http.HttpServlet;\
import javax.servlet.http.HttpServletRequest;\
import javax.servlet.http.HttpServletResponse;\
import java.io.IOException;\
import java.util.List;\
\
public class MyBankServlet extends HttpServlet\{\
    @Override\
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException\{\
        if (request.getRequestURI().equalsIgnoreCase("/transactions")) \{\
\
            System.out.println("MyBankServlet doPost");\
            Integer amount = Integer.valueOf(request.getParameter("amount"));\
            String reference = request.getParameter("reference");\
\
            Transaction transaction = Application.transactionService.create(amount,reference);\
\
            response.setContentType("application/json; charset=UTF-8");\
            String json = new ObjectMapper().writeValueAsString(transaction);\
            System.out.println(json);\
            response.getWriter().print(json);\
        \}\
        else \{\
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\
        \}\
    \}\
    @Override\
    protected void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException \{\
        if (request.getRequestURI().equalsIgnoreCase("/")) \{\
            response.setContentType("text/html; charset=UTF-8");\
            response.getWriter().print(\
                    "<html>\\n" +\
                            "<body>\\n" +\
                            "<h1>Hello Barbara</h1>\\n" +\
                            "<p>This will be your bank application</p>\\n" +\
                            "</body>\\n" +\
                            "</html>\\n");\
        \}\
        else if (request.getRequestURI().equalsIgnoreCase("/transactions"))\
        \{\
            System.out.println("MyBankServlet doGet");\
\
            response.setContentType("application/json; charset=UTF-8");\
            List<Transaction> transactions = Application.transactionService.findAll();\
            response.getWriter().print(Application.objectMapper.writeValueAsString(transactions));\
            System.out.println(Application.objectMapper.writeValueAsString(transactions));\
        \}\
    \}\
\}\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b\fs28 \cf2 \ul \ulc2 \
TransactionService
\f1\b0\fs22 \cf4 \ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf3 package org.example.service;\
  \
import org.example.model.Transaction;\
\
import java.util.List;\
import java.util.concurrent.CopyOnWriteArrayList;\
\
public class TransactionService \{\
\
    private List<Transaction> transactions = new CopyOnWriteArrayList<>(); // (1)\
\
    public TransactionService() \{\
    \}\
\
    public List<Transaction> findAll() \{\
        return transactions;\
    \}\
    public Transaction create(Integer amount, String reference)\{\
\
        System.out.println("in create Transaction - Amount: " + amount);\
        if (amount < 0) \{\
            throw new IllegalStateException();\
        \}\
        Transaction transaction = new Transaction(amount, reference);\
        transactions.add(transaction);\
        return transaction;\
    \}\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 ~    \cf3 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\

\f0\b\fs28 \cf2 \ul \ulc2 Transaction
\f1\b0\fs22 \cf3 \ulnone \
\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf3 package org.example.model;\
  \
//  import com.fasterxml.jackson.annotation.JsonProperty;\
import java.util.UUID;\
import java.time.Clock;\
import java.time.ZonedDateTime;\
\
public class Transaction \{\
    private String id;\
    private String reference;\
    private String timestamp;\
    private Integer amount;\
\
    public Transaction()\{\
    \}\
    public Transaction(Integer amount,String reference)\{\
\
        System.out.println("in Transaction Method" + reference);\
        this.id = UUID.randomUUID().toString();\
        this.timestamp = getTimestamp();\
        this.reference = reference;\
        this.amount = amount;\
    \}\
\
    // Transaction Id\
    public String getId() \{\
        return id;\
    \}\
    public void setId(String id) \{\
        this.id = id;\
    \}\
\
    public String getTimestamp() \{\
        this.timestamp = ZonedDateTime.now(Clock.systemUTC()).toString();\
        return timestamp;\
    \}\
    public void setTimestamp(String timestamp) \{\
        this.timestamp = timestamp;\
    \}\
\
    public String getReference() \{ return reference; \}\
    public void setReference(String reference) \{ this.reference = reference; \}\
\
    public Integer getAmount() \{ return amount; \}\
    public void setAmount(Integer amount) \{ this.amount = amount; \}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cb5 \}\cb1 \
}